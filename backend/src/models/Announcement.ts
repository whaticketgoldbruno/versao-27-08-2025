// src/models/Announcement.ts - Vers√£o atualizada
import {
  Table,
  Column,
  CreatedAt,
  UpdatedAt,
  Model,
  PrimaryKey,
  AutoIncrement,
  DataType,
  BelongsTo,
  ForeignKey,
  Default
} from "sequelize-typescript";
import Company from "./Company";

@Table
class Announcement extends Model<Announcement> {
  @PrimaryKey
  @AutoIncrement
  @Column
  id: number;

  @Column
  priority: number; //1 - alta, 2 - m√©dia, 3 - baixa

  @Column
  title: string;

  @Column(DataType.TEXT)
  text: string;

  @Column
  get mediaPath(): string | null {
    if (this.getDataValue("mediaPath")) {
      return `${process.env.BACKEND_URL}${process.env.PROXY_PORT ?`:${process.env.PROXY_PORT}`:""}/public/announcements/${this.getDataValue("mediaPath")}`;
    }
    return null;
  }

  @Column
  mediaName: string;

  @ForeignKey(() => Company)
  @Column
  companyId: number;

  // üéØ NOVA FUNCIONALIDADE: Informativo por empresa espec√≠fica
  @ForeignKey(() => Company)
  @Column
  targetCompanyId: number; // NULL = todas as empresas, espec√≠fico = apenas essa empresa

  //  NOVA FUNCIONALIDADE: Tipo do informativo
  @Default('general')
  @Column(DataType.ENUM('general', 'birthday', 'system'))
  type: 'general' | 'birthday' | 'system';

  // ü§ñ NOVA FUNCIONALIDADE: Informativo autom√°tico
  @Default(false)
  @Column
  isAutoGenerated: boolean;

  // ‚è∞ NOVA FUNCIONALIDADE: Data de expira√ß√£o
  @Column
  expiresAt: Date;

  @Column
  status: boolean;

  @CreatedAt
  createdAt: Date;

  @UpdatedAt
  updatedAt: Date;

  @BelongsTo(() => Company)
  company: Company;

  @BelongsTo(() => Company, 'targetCompanyId')
  targetCompany: Company;

  /**
   * Cria um informativo de anivers√°rio automaticamente
   */
  static async createBirthdayAnnouncement(
    companyId: number,
    targetCompanyId: number | null,
    user: any
  ): Promise<Announcement> {
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 1); // Expira em 24h

    return Announcement.create({
      companyId,
      targetCompanyId,
      type: 'birthday',
      isAutoGenerated: true,
      priority: 2, // M√©dia prioridade
      title: `üéâ Anivers√°rio de ${user.name}!`,
      text: `Hoje √© anivers√°rio do nosso colega ${user.name}! \n\nVamos parabenizar e desejar muito sucesso e felicidade! üéâ‚ú®`,
      status: true,
      expiresAt
    });
  }

  /**
   * Remove informativos expirados automaticamente
   */
  static async cleanExpiredAnnouncements(): Promise<number> {
    const result = await Announcement.destroy({
      where: {
        isAutoGenerated: true,
        expiresAt: {
          [require('sequelize').Op.lt]: new Date()
        }
      }
    });

    return result;
  }

  /**
   * Busca informativos para uma empresa espec√≠fica
   */
  static async getAnnouncementsForCompany(userCompanyId: number): Promise<Announcement[]> {
    return Announcement.findAll({
      where: {
        status: true,
        [require('sequelize').Op.or]: [
          { targetCompanyId: null }, // Informativos globais
          { targetCompanyId: userCompanyId } // Informativos espec√≠ficos da empresa
        ],
        [require('sequelize').Op.or]: [
          { expiresAt: null }, // Informativos sem expira√ß√£o
          { expiresAt: { [require('sequelize').Op.gt]: new Date() } } // Informativos n√£o expirados
        ]
      },
      include: [
        { model: Company, as: "company", attributes: ["id", "name"] },
        { model: Company, as: "targetCompany", attributes: ["id", "name"] }
      ],
      order: [
        ['priority', 'ASC'],
        ['createdAt', 'DESC']
      ]
    });
  }
}

export default Announcement;
